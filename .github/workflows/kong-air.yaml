name: Stage changes for Kong

on:
  push:
    branches:
      - main
      # - workflow/**
      # - contract-test
    # paths-ignore:
      # - 'PRD/**'
      # - 'platform/kong/.generated/kong.yaml'
  workflow_dispatch:

jobs:

#  this job is useful to debug workflows, see https://github.com/mheap/debug-artifact
#  debug-artifacts:
#    name: Upload Debug Artifacts
#    runs-on: self-hosted
#    steps:
#      - name: Upload Debug Artifacts
#        uses: mheap/debug-artifact@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  has-changes:
    name: Have changes in apis or common
    runs-on: self-hosted

    outputs:
      are-changes: ${{ steps.changed-files.outputs.apis-or-common }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changed-files
        with:
          filters: |
            apis-or-common:
              - 'apis/**'
              - 'common/**'
  
  oas-break:
    name: Check breaking changes
    needs: has-changes
    if: ${{ needs.has-changes.outputs.are-changes == 'true' }}
    runs-on: self-hosted

    strategy:
      matrix:
        app:
          - name: alice
            path: apis/alice/openapi-spec
          - name: bob
            path: apis/bob/openapi-spec

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Base OAS
        run: |
          if git show HEAD~1:${{ matrix.app.path }}/openapi-spec.yaml > /dev/null 2>&1; then
            git show HEAD~1:${{ matrix.app.path }}/openapi-spec.yaml > ${{ matrix.app.path }}/base.yaml
          else
            echo "No previous version of OAS found. Creating empty base.yaml."
            touch ${{ matrix.app.path }}/base.yaml
          fi

      - name: Check OAS breaking changes
        uses: oasdiff/oasdiff-action/breaking@main
        id: oasdiff
        with:
          base: ${{ matrix.app.path }}/base.yaml
          revision: ${{ matrix.app.path }}/openapi-spec.yaml

      - name: Create Issue on Breaking Change
        if: steps.oasdiff.outputs.breaking != 'No breaking changes'
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_NAME: ${{ matrix.app.name }}
          BREAKING_CHANGES: ${{ steps.oasdiff.outputs.breaking }}
        with:
          filename: .github/ISSUE_TEMPLATE/breaking-change.md

  contract-test:
    name: Contract testing
    needs: has-changes
    if: ${{ needs.has-changes.outputs.are-changes == 'true' }}
    runs-on: self-hosted

    strategy:
      matrix:
        app:
          - name: alice
            schema: apis/alice/openapi-spec/openapi-spec.yaml
            port: 9000
          - name: bob
            schema: apis/bob/openapi-spec/openapi-spec.yaml
            port: 9001

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Start ${{ matrix.app.name }} service
        run: chmod +x start.sh && ./start.sh ${{ matrix.app.name }} ${{ matrix.app.port }}

      - name: Wait for service to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:${{ matrix.app.port }} > /dev/null; then
              echo "Service is up!"
              exit 0
            fi
            echo "Waiting for service..."
            sleep 2
          done
          echo "Service failed to start in time."
          exit 1

      - name: Contract testing ${{ matrix.app.name }}
        uses: schemathesis/action@v1
        with:
          schema: ${{ matrix.app.schema }}
          base-url: http://localhost:${{ matrix.app.port }}


#   # Run security testing with OWASP ZAP Scan.
#   # The test is based on the OpenAPI specifications of the services.
#   security-test:
#     name: Security testing
#     runs-on: self-hosted
#     needs: has-changes
#     strategy:
#       matrix:
#         app:
#           - dir: flight-data
#             name: flights
#           - dir: flight-data
#             name: routes
#           - dir: sales
#             name: bookings
#           - dir: sales
#             name: customer
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Start services
#         run: chmod +x run-all.sh && ./run-all.sh
#       - name: Change server URL in OpenAPI
#         # Change the server URL in the OpenAPI file to localhost
#         # so that the security test can run against the local services
#         run: |
#           if [ "${{ matrix.app.name }}" == "flights" ]; then
#             sed -i 's|url: https://api.kong-air.com|url: http://localhost:8080|' '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           fi
#           if [ "${{ matrix.app.name }}" == "routes" ]; then
#             sed -i 's|url: https://api.kong-air.com|url: http://localhost:8081|' '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           fi
#           if [ "${{ matrix.app.name }}" == "bookings" ]; then
#             sed -i 's|url: https://api.kong-air.com|url: http://localhost:8082|' '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           fi
#           if [ "${{ matrix.app.name }}" == "customer" ]; then
#             sed -i 's|url: https://api.kong-air.com|url: http://localhost:8083|' '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           fi
#       - name: ZAP Scan
#         uses: zaproxy/action-api-scan@v0.7.0
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
#           format: openapi
#           target: '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'

#   # Run load testing with K6. The script is generated from the OpenAPI specification.
#   load-test:
#     name: Load testing
#     runs-on: self-hosted
#     needs: has-changes
#     strategy:
#       matrix:
#         app:
#           - dir: flight-data
#             name: flights
#           - dir: flight-data
#             name: routes
#           - dir: sales
#             name: bookings
#           - dir: sales
#             name: customer
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Change server URL in OpenAPI
#         # Change the server URL in the OpenAPI specification to localhost
#         # so that the load test can run against the local services
#         run: |
#           if [ "${{ matrix.app.name }}" == "flights" ]; then
#             sed -i 's|url: https://api.kong-air.com|url: http://localhost:8080|' '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           fi
#           if [ "${{ matrix.app.name }}" == "routes" ]; then
#             sed -i 's|url: https://api.kong-air.com|url: http://localhost:8081|' '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           fi
#           if [ "${{ matrix.app.name }}" == "bookings" ]; then
#             sed -i 's|url: https://api.kong-air.com|url: http://localhost:8082|' '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           fi
#           if [ "${{ matrix.app.name }}" == "customer" ]; then
#             sed -i 's|url: https://api.kong-air.com|url: http://localhost:8083|' '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           fi
#       - name: Generate K6 script from openapi
#         uses: hatamiarash7/openapi-generator@v0.3.0
#         with:
#           openapi-file: '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
#           generator: 'k6'
#           output-dir: '${{ matrix.app.dir }}/${{ matrix.app.name }}/k6'
#       - name: Specifiy username
#         # if app name is bookings, use dfreese as username
#         # change string "TODO_EDIT_THE_X-CONSUMER-USERNAME" to "dfreese" in the script.js file
#         # if the app name is customer, use jsmith as username
#         # change string "TODO_EDIT_THE_X-CONSUMER-USERNAME" to "jsmith" in the script.js file
#         run: |
#           if [ "${{ matrix.app.name }}" == "bookings" ]; then
#             sed -i 's/TODO_EDIT_THE_X-CONSUMER-USERNAME/dfreese/g' '${{ matrix.app.dir }}/${{ matrix.app.name }}/k6/script.js'
#           fi
#           if [ "${{ matrix.app.name }}" == "customer" ]; then
#             sed -i 's/TODO_EDIT_THE_X-CONSUMER-USERNAME/jsmith/g' '${{ matrix.app.dir }}/${{ matrix.app.name }}/k6/script.js'
#           fi
#       - name: Start services
#         run: chmod +x run-all.sh && ./run-all.sh
#       - name: Run load test
#         run: |
#           curl https://github.com/grafana/k6/releases/download/v0.52.0/k6-v0.52.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
#           ./k6 run '${{ matrix.app.dir }}/${{ matrix.app.name }}/k6/script.js' --vus 10 --duration 10s

#       - name: Upload Artifacts
#         # Artifacts are the files that are built along the way of the pipeline but are not committed to the repo
#         uses: actions/upload-artifact@v3
#         with:
#           name: kong-configurations
#           path: .github/artifacts/kong/*.yaml

#       - name: Create PR for changed Kong Gateway Configuration
#         id: create_pr
#         # The only file that should be changed for this PR is platform/kong/.generated/kong.yaml
#         uses: peter-evans/create-pull-request@v5
#         with:
#           title: Stage Kong Gateway Configuration
      
#   # Obtain the changelog between the previous and current OAS for all services
#   # and create a PR comment with the changelog. This is useful for tracking changes
#   # and provides details in case of breaking changes.
#   oas-changelog:
#     # obtain the changelog between the previous and current OAS for all services
#     # and create a PR comment with the changelog
#     needs: oas-to-kong
#     runs-on: self-hosted
#     strategy:
#       matrix:
#         app:
#           - dir: flight-data
#             name: flights
#           - dir: flight-data
#             name: routes
#           - dir: sales
#             name: bookings
#           - dir: sales
#             name: customer
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#       # The base OAS file is the version of the OAS file from the previous commit
#       - name: Base OAS
#         run: |
#           git show HEAD~1:${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml > ${{ matrix.app.dir }}/${{ matrix.app.name }}/base.yaml
#       - name: Obtain Changelog OAS
#         id: oaschangelog
#         uses: oasdiff/oasdiff-action/changelog@main
#         with:
#           base: ${{ matrix.app.dir }}/${{ matrix.app.name }}/base.yaml
#           revision: ${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml
#           output-to-file: ${{ matrix.app.dir }}/${{ matrix.app.name }}/changelog.txt
#       - name: Create PR Comment with Changelog
#         id: create_comment
#         if: steps.oaschangelog.outputs.changelog != 'No changelog changes'
#         uses: peter-evans/create-or-update-comment@v4
#         with:
#           issue-number: ${{ needs.oas-to-kong.outputs.pull-request-number }}
#           body-path: ${{ matrix.app.dir }}/${{ matrix.app.name }}/changelog.txt

  generate_kong_config:
    runs-on: self-hosted
    strategy:
      matrix:
        app:
          - name: alice
            path: apis/alice
          - name: bob
            path: apis/bob
    env:
      DECK_API_NAME: ${{ matrix.app.name }}
      DECK_API_PATH: ${{ matrix.app.path }}

    steps:
      - uses: actions/checkout@v2

      - name: Generate Kong Config
        run: |
          deck file openapi2kong -s $DECK_API_PATH/openapi-spec/openapi-spec.yaml \
            > $DECK_API_PATH/deck-file/generated/kong-generated.yaml

      - name: Upload Kong Generated Config
        uses: actions/upload-artifact@v4
        with:
          name: kong-generated-${{ matrix.app.name }}.yaml
          path: ${{ env.DECK_API_PATH }}/deck-file/generated/kong-generated.yaml

  plugin_and_patch_kong_config:
    runs-on: self-hosted
    needs: generate_kong_config
    strategy:
      matrix:
        app:
          - name: alice
            path: apis/alice
          - name: bob
            path: apis/bob
    env:
      DECK_API_NAME: ${{ matrix.app.name }}
      DECK_API_PATH: ${{ matrix.app.path }}

    steps:
      - uses: actions/checkout@v2

      - name: Download Kong Generated Config
        uses: actions/download-artifact@v4
        with:
          name: kong-generated-${{ matrix.app.name }}.yaml
          path: ${{ env.DECK_API_PATH }}/deck-file/generated

      - name: Setup Environment Variables
        run: source $DECK_API_PATH/env-vars/env-vars

      - name: Patch Kong Config with Plugins
        run: |
          deck file add-plugins -s $DECK_API_PATH/deck-file/generated/kong-generated.yaml \
            $DECK_API_PATH/plugins/plugins.yaml \
          | deck file patch -s - common/patches/deck.yaml \
          | deck file patch -s - $DECK_API_PATH/patches/deck.yaml \
          | deck file add-tags -s - $DECK_API_NAME \
          > $DECK_API_PATH/deck-file/generated/kong-plugined-and-patched.yaml

      - name: Upload Kong Plugined and Patched Config
        uses: actions/upload-artifact@v4
        with:
          name: kong-plugined-and-patched-${{ matrix.app.name }}.yaml
          path: ${{ env.DECK_API_PATH }}/deck-file/generated/kong-plugined-and-patched.yaml

  diff:
    runs-on: self-hosted
    needs: plugin_and_patch_kong_config
    steps:
      - uses: actions/checkout@v2

      - name: Diff all apps sequentially
        run: |
          declare -a apps=("alice" "bob")
          for app in "${apps[@]}"; do
            echo "Processing diff for $app"
            path="apis/$app"
            mkdir -p $path/deck-file/generated
            artifact_name=kong-plugined-and-patched-$app.yaml

            echo "Downloading $artifact_name"
            gh run download --name "$artifact_name" --dir "$path/deck-file/generated"

            echo "Sourcing env vars"
            source "$path/env-vars/env-vars"

            echo "Running deck diff for $app"
            deck gateway diff $path/deck-file/generated/kong-plugined-and-patched.yaml \
              common/plugin-templates/opentelemetry.yaml \
              --konnect-addr "$KONNECT_ADDR" \
              --konnect-control-plane-name "$KONNECT_CONTROL_PLANE_NAME" \
              --konnect-token "$KONNECT_TOKEN" \
              --select-tag "$app" \
              --select-tag "$DECK_OWNER"
          done

  # sync:
  #   runs-on: self-hosted
  #   needs: diff
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Sync all apps sequentially
  #       run: |
  #         declare -a apps=("alice" "bob")
  #         for app in "${apps[@]}"; do
  #           echo "Processing sync for $app"
  #           path="apis/$app"
  #           mkdir -p $path/deck-file/generated
  #           artifact_name=kong-plugined-and-patched-$app.yaml

  #           echo "Downloading $artifact_name"
  #           gh run download --name "$artifact_name" --dir "$path/deck-file/generated"

  #           echo "Sourcing env vars"
  #           source "$path/env-vars/env-vars"

  #           echo "Running deck sync for $app"
  #           deck gateway sync $path/deck-file/generated/kong-plugined-and-patched.yaml \
  #             common/plugin-templates/opentelemetry.yaml \
  #             --konnect-addr "$KONNECT_ADDR" \
  #             --konnect-control-plane-name "$KONNECT_CONTROL_PLANE_NAME" \
  #             --konnect-token "$KONNECT_TOKEN" \
  #             --select-tag "$app" \
  #             --select-tag "$DECK_OWNER"
  #         done




# # TEST STAGE
# # ROLLBACK STAGE

#   # Optional Dump and Dump API jobs
#   # dump:
#   #   runs-on: self-hosted
#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v2
#   #
#   #     - name: Dump Kong Data
#   #       run: |
#   #         export DATETIME=$(date +"%Y%m%d%H%M%S")
#   #         deck gateway dump \
#   #           --headers Kong-Admin-Token:2906rmoPLnrX9C9EoO7T \
#   #           --kong-addr https://kong-admin-api-$DECK_KONG_DEPLOYMENT.kong-air.pve-1.schenkeveld.io \
#   #           --yes \
#   #           -o backups/kong-full-$DATETIME.yaml
#   #
#   # dump_api:
#   #   runs-on: self-hosted
#   #   if: ${{ github.event_name == 'push' }} # Trigger manually or on push
#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v2
#   #
#   #     - name: Dump Kong API Data
#   #       run: |
#   #         export DATETIME=$(date +"%Y%m%d%H%M%S")
#   #         deck gateway dump \
#   #           --headers Kong-Admin-Token:2906rmoPLnrX9C9EoO7T \
#   #           --kong-addr https://kong-admin-api-$DECK_KONG_DEPLOYMENT.kong-air.pve-1.schenkeveld.io \
#   #           --select-tag $DECK_API_NAME \
#   #           --yes \
#   #           -o $DECK_API_NAME/api/deck-file/dumped/kong-$DATETIME.yaml
